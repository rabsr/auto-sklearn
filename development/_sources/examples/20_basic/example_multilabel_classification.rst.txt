.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_20_basic_example_multilabel_classification.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_20_basic_example_multilabel_classification.py:


==========================
Multi-label Classification
==========================

This examples shows how to format the targets for a multilabel classification
problem. Details on multilabel classification can be found
`here <https://scikit-learn.org/stable/modules/multiclass.html>`_.




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    type_of_target=multilabel-indicator
    [WARNING] [2020-12-11 16:07:24,233:AutoML(1):reuters] Capping the per_run_time_limit to 29.0 to have time for a least 2 models in each process.
    [(1.000000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01},
    dataset_properties={
      'task': 3,
      'sparse': False,
      'multilabel': True,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]
    auto-sklearn results:
      Dataset name: reuters
      Metric: f1_macro
      Best validation score: 0.552850
      Number of target algorithm runs: 1
      Number of successful target algorithm runs: 1
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0

    Accuracy score 0.606






|


.. code-block:: default

    import numpy as np

    import sklearn.datasets
    import sklearn.metrics
    from sklearn.utils.multiclass import type_of_target

    import autosklearn.classification


    if __name__ == "__main__":
        ############################################################################
        # Data Loading
        # ============

        # Using reuters multilabel dataset -- https://www.openml.org/d/40594
        X, y = sklearn.datasets.fetch_openml(data_id=40594, return_X_y=True, as_frame=False)

        # fetch openml downloads a numpy array with TRUE/FALSE strings. Re-map it to
        # integer dtype with ones and zeros
        # This is to comply with Scikit-learn requirement:
        # "Positive classes are indicated with 1 and negative classes with 0 or -1."
        # More information on: https://scikit-learn.org/stable/modules/multiclass.html
        y[y == 'TRUE'] = 1
        y[y == 'FALSE'] = 0
        y = y.astype(np.int)

        # Using type of target is a good way to make sure your data
        # is properly formatted
        print(f"type_of_target={type_of_target(y)}")

        X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
            X, y, random_state=1
        )

        ############################################################################
        # Building the classifier
        # =======================

        automl = autosklearn.classification.AutoSklearnClassifier(
            time_left_for_this_task=60,
            per_run_time_limit=30,
            # Bellow two flags are provided to speed up calculations
            # Not recommended for a real implementation
            initial_configurations_via_metalearning=0,
            smac_scenario_args={'runcount_limit': 1},
        )
        automl.fit(X_train, y_train, dataset_name='reuters')

        ############################################################################
        # Print the final ensemble constructed by auto-sklearn
        # ====================================================

        print(automl.show_models())

        ############################################################################
        # Print statistics about the auto-sklearn run
        # ===========================================

        # Print statistics about the auto-sklearn run such as number of
        # iterations, number of models failed with a time out.
        print(automl.sprint_statistics())

        ############################################################################
        # Get the Score of the final ensemble
        # ===================================

        predictions = automl.predict(X_test)
        print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.852 seconds)


.. _sphx_glr_download_examples_20_basic_example_multilabel_classification.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_multilabel_classification.py <example_multilabel_classification.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_multilabel_classification.ipynb <example_multilabel_classification.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
